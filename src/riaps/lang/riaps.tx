/*
 * riaps dsl
 * DSL for RIAPS models
 */

RIAPSModel:
 apps*=App
;

// Application 
App:
 'app' name=ID '{'
     messages*=Message
     libraries*=Library
     components+=Component
     actors+=Actor
 '}'
;

// Message types used in the application 
Message:
  'message' name=ID ';'
;

// Libraries used in the app
Library:
  'library' ( name=ID | name=STRING) ';'
;

// Component implementation language - C++
CppImpl: 
	('c++' | 'cpp' | 'C++') 
;

// Component implementation language - Python
PyImpl:
	( 'Python' | 'python' | 'py' ) 
;

// Component implementation language
Language:
	cppImpl ?= CppImpl | pyImpl ?=  PyImpl
; 
	
// Component types used in the application
Component:
 ( appComponent?='component' | ioComponent?='device') name=ID 
   ( '(' formals*=Formal[','] ')' )? 
   ( 'in' language=Language )?
  '{'
     ports*=Port
  '}'
;

Formal:
  argName=ID ( '=' argDefault=FormalDefault)?
;

FormalDefault: 
	(default=STRING | default=Number | default=BOOL)
;

Number:
	(INT !FLOAT) | FLOAT
;

// Port specs (interaction patterns in comment)
Port:
  (PubPort  | SubPort | // Publish(msg) -> Subscribe(msg)
   ClntPort | SrvPort | // Client(req,rep) -> Server(req,rep)
   ReqPort  | RepPort | // send Req(msg_req) -> recv Rep(msg_req) ...
                        // ... send Rep(msg_rep) -> recv Req(msg_rep)
   TimPort	|			// timer
   InsPort	|			// inside
   QryPort	| AnsPort	// send Qry(msg_qry) * -> recv Ans(msg_ans) * 
   ) ';'
;

// Publisher port (single type)
PubPort:
  'pub' name=ID ':' type=[Message] (timed='timed')? 
;

// Subscriber port (single type)
SubPort:
  'sub' name=ID ':' type=[Message] (timed='timed')? 
  	( 'within' deadline=INT (unit=TimeUnit)? )? 
;

// Client port (request and reply message types) - Owned by an SMI client
// Client operation is expected to send on the port and then receive on the same port
ClntPort:
  'clt' name=ID ':' '(' req_type=[Message]? ',' rep_type=[Message]? ')' (timed='timed')? 
;

// Server port (request and reply message types) - Owned by an SMI client
// Server operation is triggered by the port and is expected to send a reply on the same port 
SrvPort:
  'srv' name=ID ':' '(' req_type=[Message]? ',' rep_type=[Message]? ')' 
  	(timed='timed')? ( 'within' deadline=INT (unit=TimeUnit)? )? 
;

// Req port (request and reply message types) - owned by an AMI client
// Requesting client's operation is expected to send a request on the port and then terminate. 
// The arrival of the reply triggers the reply operation on the client   
ReqPort:
  'req' name=ID ':' '(' req_type=[Message]? ',' rep_type=[Message]? ')' 
  	(timed='timed')? ( 'within' deadline=INT (unit=TimeUnit)? )? 
;

// Rep port (request and reply message types) - owned by an AMI server
// Server's operation is triggered by the request message.
// The operation is expected to send a reply on the port.   
RepPort:
  'rep' name=ID ':' '(' req_type=[Message]? ',' rep_type=[Message]? ')' 
  	(timed='timed')? ( 'within' deadline=INT (unit=TimeUnit)? )? 
;

// Qry port (request and reply message types) - owned by an Query client
// Querying client's operation is expected to send one or more queries 
// The arrival of the answer triggers the answer operation on the client   
QryPort:
  'qry' name=ID ':' '(' req_type=[Message]? ',' rep_type=[Message]? ')' 
  	(timed='timed')? ( 'within' deadline=INT (unit=TimeUnit)? )? 
;

// Ans port (request and reply message types) - owned by an Query server
// Server's operation is triggered by the query message. 
// The operation is expected to send a answer on the port.   
AnsPort:
  'ans' name=ID ':' '(' req_type=[Message]? ',' rep_type=[Message]? ')' 
  	(timed='timed')? ( 'within' deadline=INT (unit=TimeUnit)? )? 
;

// Timer port. Optional argument is period in msec
TimPort:
  'timer' name=ID ((spec=INT) (periodUnit=TimeUnit)? )? ( 'within' (deadline=INT) (unit=TimeUnit)? )? 
;

// Inside port
InsPort:
  'inside' name=ID spec?='default'
;

Actual:
  argName=ID '=' argValue=ActualValue 
;

ActualValue: 
	(value=STRING | value=Number | value=BOOL | param = ID)
;

// Application actor
Actor:
  'actor' name=ID
   ( '(' formals*=Formal[','] ')' )? 
  '{'
    ( 'local' locals*=[Message][','] ';' )? 		// Optional: local messages (stay within the host)
    ( 'internal' internals*=[Message][','] ';' )? 	// Optional: internal messages (stay within the actor)
    ( 'uses' '{' usage*=Usage '}' )?				// Optional: resource usage 
    '{' instances+=Instance '}'
  '}'
;

// Usage:
Usage: 
 	( CPUUsage |
 	  MemUsage |
 	  SpaceUsage | 
 	  NetUsage 
 	)
 	 ';'
 ;

CPUUsage:
	'cpu' (max?='max')? usage=INT '%' ( 'over' interval=INT (unit=TimeUnit)? )? 
;

TimeUnit:
	'sec' | 'min' | 'msec'
;

MemUsage:
	'mem' usage=INT ( unit=MemUnit )?
;

MemUnit:
	'mb' | 'kb' | 'gb'
;

SpaceUsage:
	'space' usage=INT ( unit=SpaceUnit )?
;

SpaceUnit:
	'mb' | 'gb'
;

RateUnit:
	'kbps' | 'mbps' 
;


BurstUnit:
	'kb' | 'k'
;

NetUsage:
//	'net' (max?='max')? usage=INT (memUnit=MemUnit)? ( 'over' interval=INT (timeUnit=TimeUnit)? )? 
	'net' 'rate' rate=Number rateUnit=RateUnit 
			( 'ceil' ceil=Number ceilUnit=RateUnit )? 
			( 'burst' burst=Number burstUnit=BurstUnit )?
;

// Instance of a component, used inside an actor
Instance:
   name=ID ':' type=[Component] ( '(' actuals*=Actual[','] ')' )?  ';'
;

// Obligatory comment spec
Comment:
	/\/\/.*$/|/\/\*(.|\n)*?\*\// 
;

