app DistributedEstimatorGpio {
    // Message types used in the app
    message SensorReady; 
    message SensorQuery; 
    message SensorValue; 
    message Estimate;
    message Blink;
    
	// GPIODevice
    device GPIODevice() {
      sub blink : Blink;
    }
    
    // Sensor component
    component Sensor (value=1.0) {
      timer clock 500; 		   					     // Periodic timer trigger to trigger sensor every 2 Hz (0.5 sec)
      pub ready : SensorReady ;						 // Publish port for SensorReady messages 
      rep request : (SensorQuery, SensorValue);	     // Reply port to query the sensor and retrieve its value
    }
    
    // Local estimator component
    component LocalEstimator (frqArg=2) {            // fArg = frequency when estimate produced
      sub ready : SensorReady ;						 // Subscriber port to trigger component with SensorReady messages
      req query : (SensorQuery, SensorValue);	     // Request port to query the sensor and retrieve its value
      pub estimate : Estimate ;						 // Publish port to publish estimated value messages
      pub blink : Blink;
    }
    
    // Global estimator
    component GlobalEstimator () { 
      sub estimate : Estimate;	// Subscriber port to receive the local estimates
      timer wakeup 250; 		// Periodic timer to wake up estimator every 4 Hz (.25 sec)
    }
    
    // Estimator actor
    actor Estimator (freqArg,value=0.0) {
      local SensorReady, SensorQuery, SensorValue, Blink;	// Local message types
      {  // Sensor component
        sensor : Sensor(value=value);								
        // Local estimator, publishes global message 'Estimate' 
		filter : LocalEstimator(frqArg=freqArg);
		// GPIO component to blink
		gpio : GPIODevice();
      }
    }
    
    // Global Estimator actor
    actor Aggregator () {     
      {  // Global estimator, subscribes to 'Estimate' messages
        aggr : GlobalEstimator();	
      }
    }
}
